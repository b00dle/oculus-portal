{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PORT",
				"PORTALS"
			],
			[
				"ACT",
				"ACTIVEPORTALS"
			],
			[
				"res",
				"resolved_visibility"
			],
			[
				"re",
				"resolved_visibility"
			],
			[
				"sf",
				"sf_visibility"
			],
			[
				"por",
				"portal"
			],
			[
				"Port",
				"Portals"
			],
			[
				"POR",
				"PORTALCUBES"
			],
			[
				"PO",
				"PORTALS"
			],
			[
				"visi",
				"sf_visibility"
			],
			[
				"port",
				"portalCube"
			],
			[
				"orign",
				"origin_exit"
			],
			[
				"USER",
				"USERTYPE"
			],
			[
				"EX",
				"EXCLUDEGROUPS"
			],
			[
				"U",
				"USERID"
			],
			[
				"EXI",
				"EXITORIGIN"
			],
			[
				"ENTRY",
				"ENTRYORIGIN"
			],
			[
				"EXIT",
				"EXITSCENE"
			],
			[
				"ori",
				"origin"
			],
			[
				"make",
				"make_rot_mat"
			],
			[
				"portl",
				"portal_height"
			],
			[
				"portal",
				"portal_width"
			],
			[
				"View",
				"ViewTransformIn"
			],
			[
				"Vie",
				"ViewTransformIn"
			],
			[
				"OVR",
				"OVR_user"
			],
			[
				"HEAD",
				"HEADTRANSFORM"
			],
			[
				"USRE",
				"USERSCREEN"
			],
			[
				"sfUs",
				"sfUserScreen"
			],
			[
				"get",
				"get_translate"
			],
			[
				"inv",
				"inv_rotation"
			],
			[
				"porta",
				"portalGeom"
			],
			[
				"DE",
				"DEFAULTS"
			],
			[
				"crea",
				"create_geometry_from_file"
			],
			[
				"sfUser",
				"sfUserZoom"
			],
			[
				"sf_porta",
				"sf_portal_zoom"
			],
			[
				"Porta",
				"PortalZoomIn"
			],
			[
				"head",
				"head_trans"
			],
			[
				"hea",
				"head_trans"
			],
			[
				"de",
				"default_geometry"
			],
			[
				"G",
				"GEOMETRY"
			],
			[
				"N",
				"None"
			],
			[
				"left_",
				"left_hand_trackingreader"
			],
			[
				"Tr",
				"TrackingTargetReader"
			],
			[
				"init",
				"init_pointer"
			],
			[
				"Sc",
				"SceneGraph"
			],
			[
				"Ma",
				"Manipulator"
			],
			[
				"Mani",
				"Manipulator"
			],
			[
				"mani",
				"Manipulator"
			],
			[
				"Matrix",
				"MatrixOut"
			],
			[
				"Matr",
				"MatrixOut"
			],
			[
				"sef",
				"self"
			],
			[
				"sc",
				"script"
			],
			[
				"sf_end",
				"sf_end_mat"
			],
			[
				"line",
				"line_update"
			],
			[
				"tra",
				"Transform"
			],
			[
				"VEC",
				"Vec3"
			],
			[
				"interface",
				"interface_node"
			],
			[
				"create",
				"create_line_visualization"
			],
			[
				"file",
				"file_buffers_"
			],
			[
				"color",
				"color_texArrays_"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lib/portal_lib/PortalManager.py",
			"settings":
			{
				"buffer_size": 13590,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/User.py",
			"settings":
			{
				"buffer_size": 11714,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/DesktopUser.py",
			"settings":
			{
				"buffer_size": 4951,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/SceneManager.py",
			"settings":
			{
				"buffer_size": 8927,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/python\n\n# import guacamole libraries\nimport avango\nimport avango.script\nfrom avango.script import field_has_changed\nimport avango.gua\n\nfrom Portal import *\n\nclass PortalCube(avango.script.Script):\n  \n  sf_visibility = avango.SFBool()\n\n  def __init__(self):\n    self.super(PortalCube).__init__()\n\n    self.Portals              = []\n    \n    self.NAME                 = \"\"\n    self.ENTRYSCENE           = avango.gua.nodes.SceneGraph()\n    self.EXITSCENE            = avango.gua.nodes.SceneGraph()\n    self.ENTRYORIGIN          = avango.gua.Vec3()\n    self.EXITORIGIN           = avango.gua.Vec3()\n    self.SIZE                 = 1.0\n    self.EXCLUDEGROUPS        = []\n    self.FIRSTPORTALID        = 0\n    self.USERTYPE             = \"\"\n    self.USERID               = 0\n\n    self.sf_visibility.value  = True\n    self.visibility_updated  = False\n\n  def my_constructor(self, NAME, ENTRYSCENE, EXITSCENE, ENTRYORIGIN, EXITORIGIN, SIZE, EXCLUDEGROUPS, FIRSTPORTALID, USERTYPE, USERID, VISIBLE = True):\n    self.NAME                 = NAME\n    self.ENTRYSCENE           = ENTRYSCENE\n    self.EXITSCENE            = EXITSCENE\n    self.ENTRYORIGIN          = ENTRYORIGIN\n    self.EXITORIGIN           = EXITORIGIN\n    self.SIZE                 = SIZE\n    self.EXCLUDEGROUPS        = EXCLUDEGROUPS\n    self.FIRSTPORTALID        = FIRSTPORTALID\n    self.USERTYPE             = USERTYPE\n    self.USERID               = USERID\n\n    self.sf_visibility.value  = VISIBLE\n    if VISIBLE == False:\n      self.visibility_updated = True\n\n    self.create_portals()\n\n  @field_has_changed(sf_visibility)\n  def resolve_visibility(self):\n    if self.sf_visibility == False:\n      for portal in self.Portals:\n        if \"do_not_display_group\" not in portal.GEOMETRY.GroupNames.value:\n          portal.GEOMETRY.GroupNames.value.append(\"do_not_display_group\")\n    else:\n      for portal in self.Portals:\n        if \"do_not_display_group\" in portal.GEOMETRY.GroupNames.value:\n          portal.GEOMETRY.GroupNames.value.remove(\"do_not_display_group\")\n\n    self.visibility_updated = True\n\n  def create_portals(self):\n    #############PORTAL 1##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x,\n                                          self.ENTRYORIGIN.y,\n                                          self.ENTRYORIGIN.z + self.SIZE/2)\n      \n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x,\n                                          self.EXITORIGIN.y,\n                                          self.EXITORIGIN.z + self.SIZE/2)\n    \n    self.Portals.append(Portal())\n    self.Portals[0].my_constructor(\"portal_\" + str(self.FIRSTPORTALID) + \"_\" + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene\n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    #############PORTAL 1##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x,\n                                          self.ENTRYORIGIN.y,\n                                          self.ENTRYORIGIN.z - self.SIZE/2) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x,\n                                          self.EXITORIGIN.y,\n                                          self.EXITORIGIN.z - self.SIZE/2) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    self.Portals.append(Portal())\n    self.Portals[1].my_constructor(\"portal_\" + str(self.FIRSTPORTALID + 1) + \"_\" + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene\n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    #############PORTAL 2##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x,\n                                          self.ENTRYORIGIN.y - self.SIZE/2,\n                                          self.ENTRYORIGIN.z) * \\\n                avango.gua.make_rot_mat(-90, 1, 0, 0) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x,\n                                          self.EXITORIGIN.y - self.SIZE/2,\n                                          self.EXITORIGIN.z) * \\\n                avango.gua.make_rot_mat(-90, 1, 0, 0) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    self.Portals.append(Portal())\n    self.Portals[2].my_constructor(\"portal_\" + str(self.FIRSTPORTALID + 2) + \"_\" + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene\n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    #############PORTAL 3##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x,\n                                          self.ENTRYORIGIN.y + self.SIZE/2,\n                                          self.ENTRYORIGIN.z) * \\\n                avango.gua.make_rot_mat(90, 1, 0, 0) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x,\n                                          self.EXITORIGIN.y + self.SIZE/2,\n                                          self.EXITORIGIN.z) * \\\n                avango.gua.make_rot_mat(90, 1, 0, 0) * \\\n                avango.gua.make_rot_mat(180, 0, 1, 0)\n\n    self.Portals.append(Portal())\n    self.Portals[3].my_constructor(\"portal_\" + str(self.FIRSTPORTALID + 3) + \"_\"  + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene\n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    #############PORTAL 4##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x - self.SIZE/2,\n                                          self.ENTRYORIGIN.y,\n                                          self.ENTRYORIGIN.z) * \\\n                avango.gua.make_rot_mat(-90, 0, 1, 0)\n\n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x - self.SIZE/2,\n                                          self.EXITORIGIN.y,\n                                          self.EXITORIGIN.z) * \\\n                avango.gua.make_rot_mat(-90, 0, 1, 0)\n\n    self.Portals.append(Portal())\n    self.Portals[4].my_constructor(\"portal_\" + str(self.FIRSTPORTALID + 4) + \"_\" + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene\n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    #############PORTAL 5##############\n    entry_pos = avango.gua.make_trans_mat(self.ENTRYORIGIN.x + self.SIZE/2,\n                                          self.ENTRYORIGIN.y,\n                                          self.ENTRYORIGIN.z) * \\\n                avango.gua.make_rot_mat(90, 0, 1, 0)\n\n    exit_pos  = avango.gua.make_trans_mat(self.EXITORIGIN.x + self.SIZE/2,\n                                          self.EXITORIGIN.y,\n                                          self.EXITORIGIN.z) * \\\n                avango.gua.make_rot_mat(90, 0, 1, 0)\n\n    self.Portals.append(Portal())\n    self.Portals[5].my_constructor(\"portal_\" + str(self.FIRSTPORTALID + 5) + \"_\"  + self.USERTYPE + \"_\" + str(self.USERID),\n                                  self.ENTRYSCENE, #simplescene \n                                  self.EXITSCENE,\n                                  entry_pos,\n                                  exit_pos,\n                                  self.SIZE,\n                                  self.SIZE,\n                                  self.USERTYPE + \"_\" + str(self.USERID) + \"_portals\",\n                                  self.EXCLUDEGROUPS\n                                  )\n\n    if self.sf_visibility == False:\n      for portal in self.Portals:\n        if \"do_not_display_group\" not in portal.GEOMETRY.GroupNames.value:\n          portal.GEOMETRY.GroupNames.value.append(\"do_not_display_group\")\n\n",
			"file": "lib/portal_lib/PortalCube.py",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 9531,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/portal_lib/PortalController.py",
			"settings":
			{
				"buffer_size": 8852,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/portal_lib/Portal.py",
			"settings":
			{
				"buffer_size": 9273,
				"line_ending": "Unix"
			}
		},
		{
			"file": "daemon.py",
			"settings":
			{
				"buffer_size": 10478,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/Device.py",
			"settings":
			{
				"buffer_size": 16376,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 2488,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/Device.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/DesktopUser.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/Navigation.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/OVRUser.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/User.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/ViewingManager.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/InputMapping.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/daemon.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/documentation/html/EulerAngles_8py.html",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/configs/desktop_ovr.xml",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/documentation/html/namespacelib_1_1PowerWallUser.html",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/documentation/html/installdox",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/documentation/html/namespacemembers_vars.html",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/documentation/html/namespacelib_1_1EulerAngles.html",
		"/home/buda8714/Documents/oculusRift/github/Oculus-Powerwall-Setup/lib/SceneManager.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/interface_lib/Manipulator.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/portal_lib/PortalController.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/TrackingReader.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/PowerWallUser.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/SceneManager.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/lib/interface_lib/Interface.py",
		"/home/buda8714/Documents/oculusRift/github/oculus-portal/main.py",
		"/home/senu8384/Desktop/oculus_interface/Manipulator.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/Platform.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/InputMapping.py",
		"/home/senu8384/Desktop/oculus_interface/Tools.py",
		"/home/senu8384/Desktop/oculus_interface/handsome.py",
		"/home/senu8384/Desktop/oculus_interface/daemon.py",
		"/home/senu8384/Desktop/oculus_interface/device.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/main.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/device.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/navigator.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/Portal.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/PortalManager.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/simple_scene.py",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/mesh.frag",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/common/header.glsl",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/mesh.vert",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Video3D.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferNURBSUberShader.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferNURBSUberShader.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferPass.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferVideo3DUberShader.hpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/VolumeLoader.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Volume.hpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/NURBS.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/mesh/mesh.frag",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Mesh.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Video3DLoader.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.frag",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.geom",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.vert",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferVideo3DUberShader.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/scenegraph/Video3DNode.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Video3DLoader.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/scenegraph/Video3DNode.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/mesh/mesh.vert",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Mesh.hpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer.hpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/Mesh.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/MeshLoader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferMeshUberShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/video3d_geometry/KinectCalibrationFile.hpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/Camera.hpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferNURBSUberShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBSLoader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBSShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/nurbs_geometry/tml/util/copy_constructor_adapter.hpp",
		"/home/senu8384/Desktop/github/guacamole/CMakeLists.txt",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/FinalPass.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/MeshLoader.hpp",
		"/home/senu8384/Desktop/guacamole/scripts/guacamole.sublime-project",
		"/home/senu8384/Documents/svn/kinect/src/KinectPlayer.cpp",
		"/home/senu8384/Documents/svn/kinect/src/demo_app.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Video3DLoader.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/MeshLoader.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/VolumeLoader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/scenegraph/GeometryNode.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/scenegraph/Video3DNode.hpp",
		"/home/senu8384/Documents/svn/kinect/include/KinectPlayer.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Video3D.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GBufferNURBSUberShader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/SerializedNode.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GBufferPass.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/UberShader.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/UberShader.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Video3DLoader.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/GBufferMeshUberShader.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Window.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Window.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Mesh.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/NURBSLoader.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/NURBSLoader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/NURBS.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Video3D.hpp~",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Video3D.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GeometryPass.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GeometryLoader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/databases/GeometryDatabase.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Geometry.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Geometry.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/video3d_geometry/BackgroundDetector.h",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Volume.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/IGSGeometry.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Volume.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/SerializedScene.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/enums.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/beziercurve_segment.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/contour_segment.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Serializer.cpp~",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Serializer.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/determine_splits_from_endpoints.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Serializer.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/status_event.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/start_event.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/scenegraph.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/nurbs_geometry/tml/parametric/domain/previous_next_set.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/utils/KDTreeUtils.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/LightingUberShader.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/GBuffer.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GBuffer.hpp",
		"/home/senu8384/Desktop/guacamole/resources/materials/gua_bounding_box.gmd"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"zoom",
			"USERSCREEN",
			"ISOVR",
			"ISOVRUSER",
			"resolved_visibility",
			"cubeportals",
			"GROUPNAME",
			"camera",
			"+ +",
			"DESK_user_portals[self.USERID]",
			" +",
			"0_\"",
			"DESK_\"",
			"\"DESK_\"",
			"DESK_user.id",
			"self.group_names",
			"portal_height",
			"portal_width",
			"VIEWINGMANAGER.viewer.SceneGraphs.value[1]",
			"VIEWINGMANAGER.viewer.Scenegraphs.value[0]",
			"origin_exit",
			"box_size",
			"origin_entry",
			"0.5",
			"origin",
			"ovr",
			"tracking-oculus-front",
			"size",
			"SF_USER",
			"self.ovr_user_list",
			"camera",
			"pipe",
			"pip",
			"water_updater",
			"self.WIDTH",
			"sf_portal_zoom",
			"inv_rotation",
			"VIEWINGPIPELINES",
			"5",
			"stations[1]",
			"tracking-glasses-1",
			"create_avatar",
			"manipulator",
			"manupulator",
			"Manipulator",
			"do something",
			"head_transform",
			"Picker",
			".set_uniforms",
			"set_uniform",
			"calibrationfile",
			"calibration file",
			"vPosition",
			"_parametric_texture_buffer",
			"parameter_texture",
			"draw kinect",
			"get_uniform_mapping",
			"mater",
			"material"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"visibility_updated",
			"portalcubes",
			"+",
			"Portals",
			"\" + str(self.FIRSTPORTALID) + \"_\"",
			"\" + self.USERTYPE + \"_\" +",
			"self.USERTYPE + \"_\" +",
			"self.USERID",
			"self.EXCLUDEGROUPS",
			"self.SIZE",
			"self.EXITSCENE",
			"self.ENTRYSCENE",
			"self.EXITORIGIN",
			"self.SIZE",
			"self.ENTRYORIGIN",
			"box_size/2",
			"origin_entry"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/portal_lib/PortalManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13590,
						"regions":
						{
						},
						"selection":
						[
							[
								3359,
								3359
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/User.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11714,
						"regions":
						{
						},
						"selection":
						[
							[
								67,
								67
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/DesktopUser.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4951,
						"regions":
						{
						},
						"selection":
						[
							[
								3122,
								3122
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/SceneManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8927,
						"regions":
						{
						},
						"selection":
						[
							[
								988,
								988
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 585.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		},
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "lib/portal_lib/PortalCube.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9531,
						"regions":
						{
						},
						"selection":
						[
							[
								1528,
								1528
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/portal_lib/PortalController.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8852,
						"regions":
						{
						},
						"selection":
						[
							[
								1361,
								1361
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/portal_lib/Portal.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9273,
						"regions":
						{
						},
						"selection":
						[
							[
								1128,
								1128
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 270.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "daemon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10478,
						"regions":
						{
						},
						"selection":
						[
							[
								6866,
								6866
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3150.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/Device.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16376,
						"regions":
						{
						},
						"selection":
						[
							[
								6693,
								6693
							]
						],
						"settings":
						{
							"history_list_is_closing": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 2025.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2488,
						"regions":
						{
						},
						"selection":
						[
							[
								709,
								709
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.437013094592,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "OculusKombiSetup.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"desk",
				"lib/DesktopUser.py"
			],
			[
				"user",
				"lib/User.py"
			],
			[
				"dev",
				"lib/Device.py"
			],
			[
				"deamon",
				"daemon.py"
			],
			[
				"main",
				"main.py"
			],
			[
				"device",
				"lib/Device.py"
			],
			[
				"view",
				"lib/ViewingManager.py"
			],
			[
				"ovr",
				"lib/OVRUser.py"
			],
			[
				"inp",
				"lib/InputMapping.py"
			],
			[
				"nav",
				"lib/Navigation.py"
			],
			[
				"header",
				"resources/shaders/common/header.glsl"
			],
			[
				"gbuffernurb",
				"src/gua/renderer/GBufferNURBSUberShader.cpp"
			],
			[
				"mesh.frag",
				"resources/shaders/uber_shaders/gbuffer/video3d/mesh.frag"
			],
			[
				"video3d.geom",
				"resources/shaders/uber_shaders/gbuffer/video3d/video3d.geom"
			],
			[
				"video3d.vert",
				"resources/shaders/uber_shaders/gbuffer/video3d/video3d.vert"
			],
			[
				"mesh.vert",
				"resources/shaders/uber_shaders/gbuffer/video3d/mesh.vert"
			],
			[
				"vid",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"video",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"g",
				"src/gua/renderer/GBufferPass.cpp"
			],
			[
				"camer",
				"include/gua/renderer/Camera.hpp"
			],
			[
				"mesh",
				"src/gua/renderer/Mesh.cpp"
			],
			[
				"video3d",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"window",
				"src/gua/renderer/Window.cpp"
			],
			[
				"w",
				"include/gua/renderer/Window.hpp"
			],
			[
				"meshloader",
				"src/gua/renderer/MeshLoader.cpp"
			],
			[
				"geome",
				"include/gua/scenegraph/GeometryNode.hpp"
			],
			[
				"ivdeo",
				"include/gua/scenegraph/Video3DNode.hpp"
			],
			[
				"volume",
				"include/gua/renderer/VolumeLoader.hpp"
			],
			[
				"meshl",
				"include/gua/renderer/MeshLoader.hpp"
			],
			[
				"video3",
				"include/gua/renderer/Video3DLoader.hpp"
			],
			[
				"se",
				"include/gua/renderer/SerializedNode.hpp"
			],
			[
				"gbuffer",
				"include/gua/renderer/GBufferPass.hpp"
			],
			[
				"gbu",
				"src/gua/renderer/GBufferPass.cpp"
			],
			[
				"ubers",
				"src/gua/renderer/UberShader.cpp"
			],
			[
				"meshs",
				"src/gua/renderer/GBufferMeshUberShader.cpp"
			],
			[
				"nur",
				"src/gua/renderer/NURBS.cpp"
			],
			[
				"nurbs",
				"src/gua/renderer/NURBSLoader.cpp"
			],
			[
				"geo",
				"include/gua/scenegraph/GeometryNode.hpp"
			],
			[
				"nurb",
				"include/gua/renderer/NURBS.hpp"
			],
			[
				"r",
				"include/gua/renderer/RenderClient.hpp"
			],
			[
				"renderer",
				"src/gua/renderer/Renderer.cpp"
			],
			[
				"re",
				"include/gua/renderer/RenderContext.hpp"
			],
			[
				"dxt",
				"include/gua/renderer/video3d_geometry/DXTCompressor.h"
			],
			[
				"viedo",
				"include/gua/renderer/Video3D.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 161.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
