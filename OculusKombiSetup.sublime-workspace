{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Lights",
				"LIGHTEXITS"
			],
			[
				"a",
				"animation_end_pos"
			],
			[
				"anima",
				"animation_flag"
			],
			[
				"ani",
				"animation_start"
			],
			[
				"r",
				"rotation_flag"
			],
			[
				"cube_",
				"cube_rotate"
			],
			[
				"cube",
				"cube_transform"
			],
			[
				"Trans",
				"Transform"
			],
			[
				"init",
				"init_lightexits"
			],
			[
				"light",
				"LIGHTEXIT"
			],
			[
				"sf",
				"sf_rot_up"
			],
			[
				"sf_key",
				"sf_key_right_pointer"
			],
			[
				"right",
				"right_pointer_pressed"
			],
			[
				"rot",
				"rot_up_button"
			],
			[
				"make",
				"make_trans_mat"
			],
			[
				"Tran",
				"Transform"
			],
			[
				"Light",
				"lightCube"
			],
			[
				"Lig",
				"lightcube"
			],
			[
				"button",
				"button_geometry"
			],
			[
				"create",
				"create_gamescene"
			],
			[
				"Tra",
				"Transform"
			],
			[
				"left",
				"left_hand_avatar"
			],
			[
				"Jo",
				"Joseph"
			],
			[
				"mat",
				"make_trans_mat"
			],
			[
				"In",
				"InteractivGeometry"
			],
			[
				"pick",
				"picked_object"
			],
			[
				"has",
				"has_field"
			],
			[
				"blue",
				"blue_slider"
			],
			[
				"g",
				"green_slider"
			],
			[
				"red",
				"red_slider"
			],
			[
				"sf_color",
				"sf_color_red"
			],
			[
				"size",
				"size_slider"
			],
			[
				"I",
				"InteractivGeometry"
			],
			[
				"menu",
				"menu_node"
			],
			[
				"G",
				"GEOMETRY"
			],
			[
				"slid",
				"slider_x"
			],
			[
				"sli",
				"slider_x"
			],
			[
				"Ri",
				"RIGHTHAND"
			],
			[
				"interf",
				"interface1"
			],
			[
				"Mater",
				"Material"
			],
			[
				"Tr",
				"Transform"
			],
			[
				"LF",
				"LEFTHAND"
			],
			[
				"Lef",
				"LeftPointerPicked"
			],
			[
				"picked",
				"picked_object"
			],
			[
				"Ge",
				"GeometryNode"
			],
			[
				"L",
				"LeftPicker"
			],
			[
				"monkey",
				"monkey_object_handler"
			],
			[
				"test",
				"test_object"
			],
			[
				"ray_right",
				"ray_right_avatar"
			],
			[
				"ray",
				"ray_right_avatar"
			],
			[
				"Mat",
				"Material"
			],
			[
				"MAT",
				"MaterialUpdater"
			],
			[
				"LE",
				"LeftPicker"
			],
			[
				"pick_",
				"pick_transform"
			],
			[
				"S",
				"SCENEGRAPH"
			],
			[
				"Left",
				"LeftPicker"
			],
			[
				"left_",
				"left_hand_trackingreader"
			],
			[
				"Sc",
				"SceneGraph"
			],
			[
				"Ma",
				"Manipulator"
			],
			[
				"Mani",
				"Manipulator"
			],
			[
				"mani",
				"Manipulator"
			],
			[
				"Matrix",
				"MatrixOut"
			],
			[
				"Matr",
				"MatrixOut"
			],
			[
				"sef",
				"self"
			],
			[
				"sc",
				"script"
			],
			[
				"sf_end",
				"sf_end_mat"
			],
			[
				"line",
				"line_update"
			],
			[
				"tra",
				"Transform"
			],
			[
				"VEC",
				"Vec3"
			],
			[
				"interface",
				"interface_node"
			],
			[
				"file",
				"file_buffers_"
			],
			[
				"color",
				"color_texArrays_"
			]
		]
	},
	"buffers":
	[
		{
			"file": "lib/User.py",
			"settings":
			{
				"buffer_size": 11749,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/DesktopUser.py",
			"settings":
			{
				"buffer_size": 4951,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/interface_lib/Manipulator.py",
			"settings":
			{
				"buffer_size": 15152,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/portal_lib/Portal.py",
			"settings":
			{
				"buffer_size": 6234,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/python\n\nimport avango\nimport avango.gua\nimport avango.script\n\n\nfrom ..interface_lib.Interface import *\n\nclass LightCube(avango.script.Script):\n  sf_enabled        = avango.SFBool()\n  sf_color_red      = avango.SFFloat()\n  sf_color_green    = avango.SFFloat()\n  sf_color_blue     = avango.SFFloat()\n  sf_switch_enable  = avango.SFBool()\n\n  sf_rot_up         = avango.SFBool()\n  sf_rot_down       = avango.SFBool()\n  sf_rot_left       = avango.SFBool()\n  sf_rot_right      = avango.SFBool()\n\n  mf_pick_results_plus_x  = avango.gua.MFPickResult()\n  mf_pick_results_minus_x = avango.gua.MFPickResult()\n\n  mf_pick_results_plus_y  = avango.gua.MFPickResult()\n  mf_pick_results_minus_y = avango.gua.MFPickResult()\n\n  mf_pick_results_plus_z  = avango.gua.MFPickResult()\n  mf_pick_results_minus_z = avango.gua.MFPickResult()\n\n\n  def __init__(self):\n    self.super(LightCube).__init__()\n    self.always_evaluate(True)\n    self.timer = avango.nodes.TimeSensor()\n\n    self.NAME = \"default_cube\"\n    self.HAS_LIGHT    = False\n    self.ALWAYS_LIGHT = False\n\n    self.console_node            = avango.gua.nodes.TransformNode(Name = \"menu_node\")\n    self.cube                    = avango.gua.nodes.GeometryNode()\n    #self.cube.add_and_init_field(avango.script.SFObject(), \"LightCube\", self)\n    self.sf_color_red.value        = 0.5\n    self.sf_color_green.value      = 0.5\n    self.sf_color_blue.value       = 0.5\n    self.LIGHTEXITS = []\n\n    self.rot_up_button    = Button()\n    self.rot_down_button  = Button()\n    self.rot_left_button  = Button()\n    self.rot_right_button = Button()\n\n    self.pick_transforms_appended = False\n\n    self.picked_plus_x = avango.gua.nodes.GeometryNode()\n    self.picked_minus_x = avango.gua.nodes.GeometryNode()\n\n    self.picked_plus_y = avango.gua.nodes.GeometryNode()\n    self.picked_minus_y = avango.gua.nodes.GeometryNode()\n\n    self.picked_plus_z = avango.gua.nodes.GeometryNode()\n    self.picked_minus_z = avango.gua.nodes.GeometryNode()\n\n    self.animation_flag = False\n    self.animation_time = 0.5\n    #self.animation_start_pos = avango.g\n    #self.animation_end_pos\n\n\n  def my_constructor(self, NAME, SCENEGRAPH, ROOMNODE, ACTIV, LIGHTEXITS):\n    # init light cube\n    self.loader       = avango.gua.nodes.GeometryLoader()\n    self.NAME         = NAME\n    self.HAS_LIGHT    = ACTIV\n    self.ALWAYS_LIGHT = ACTIV\n    self.LIGHTEXITS   = LIGHTEXITS\n    self.SCENEGRAPH   = SCENEGRAPH\n    self.ROOMNODE     = ROOMNODE\n\n    self.cube_transform = avango.gua.nodes.TransformNode()\n\n    self.cube_transform.Transform.value = avango.gua.make_trans_mat(0,1.5,0)\n    self.cube_rotate = avango.gua.nodes.TransformNode()\n\n\n    self.cube = self.loader.create_geometry_from_file( NAME + \"_cube\" , 'data/objects/cube.obj', \"lightcube\",\n                  avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n    self.cube.Transform.value = avango.gua.make_scale_mat(0.1, 0.1, 0.1)\n    self.cube.GroupNames.value  = [\"interactiv\"]\n    self.cube.add_and_init_field(avango.script.SFObject(), \"LightCube\", self)\n\n    self.ROOMNODE.Children.value.append(self.cube_transform)\n    \n    self.cube_transform.Children.value.append(self.cube_rotate)\n    self.cube_rotate.Children.value.append(self.cube)\n\n\n    # init menu\n    self.initalize_console()\n    self.console_node.Transform.value = avango.gua.make_trans_mat(0.0, 1.5, -0.5) * avango.gua.make_rot_mat(90, 1, 0, 0)\n    self.enable_console(self.ROOMNODE)\n\n    self.init_lightexits()\n\n    # One Pick_Transform for every side of the cube\n    # Each Pick_Transform holds a Ray and a Visual representation\n    self.picker_plus_x         = LightRayPicker()\n    self.pick_transform_plus_x = avango.gua.nodes.TransformNode(Name = \"pick_transform_plus_x\")\n    self.pick_transform_plus_x.Transform.value = avango.gua.make_rot_mat(-90, 0, 1, 0)\n    self.initialize_pick_transform(self.pick_transform_plus_x, self.picker_plus_x)\n\n    self.picker_minus_x         = LightRayPicker()\n    self.pick_transform_minus_x = avango.gua.nodes.TransformNode(Name = \"pick_transform_minus_x\")\n    self.pick_transform_minus_x.Transform.value = avango.gua.make_rot_mat(90, 0, 1, 0)\n    self.initialize_pick_transform(self.pick_transform_minus_x, self.picker_minus_x)\n\n    self.picker_plus_y         = LightRayPicker()\n    self.pick_transform_plus_y = avango.gua.nodes.TransformNode(Name = \"pick_transform_plus_y\")\n    self.pick_transform_plus_y.Transform.value = avango.gua.make_rot_mat(90, 1, 0, 0)\n    self.initialize_pick_transform(self.pick_transform_plus_y, self.picker_plus_y)\n    \n    self.picker_minus_y         = LightRayPicker()\n    self.pick_transform_minus_y = avango.gua.nodes.TransformNode(Name = \"pick_transform_minus_y\")\n    self.pick_transform_minus_y.Transform.value = avango.gua.make_rot_mat(-90, 1, 0, 0)\n    self.initialize_pick_transform(self.pick_transform_minus_y, self.picker_minus_y)\n    \n    self.picker_plus_z         = LightRayPicker()\n    self.pick_transform_plus_z = avango.gua.nodes.TransformNode(Name = \"pick_transform_plus_z\")\n    self.initialize_pick_transform(self.pick_transform_plus_z, self.picker_plus_z)\n\n    self.picker_minus_z         = LightRayPicker()\n    self.pick_transform_minus_z = avango.gua.nodes.TransformNode(Name = \"pick_transform_minus_z\")\n    self.pick_transform_minus_z.Transform.value = avango.gua.make_rot_mat(180, 1, 0, 0)\n    self.initialize_pick_transform(self.pick_transform_minus_z, self.picker_minus_z)\n\n    # Field Connections for the pick results\n    self.mf_pick_results_plus_x.connect_from(self.picker_plus_x.Results)\n    self.mf_pick_results_minus_x.connect_from(self.picker_minus_x.Results)\n\n    self.mf_pick_results_plus_y.connect_from(self.picker_plus_y.Results)\n    self.mf_pick_results_minus_y.connect_from(self.picker_minus_y.Results)\n\n    self.mf_pick_results_plus_z.connect_from(self.picker_plus_z.Results)\n    self.mf_pick_results_minus_z.connect_from(self.picker_minus_z.Results)\n\n\n  def evaluate(self):\n    if (self.animation_flag == True ):\n      _current_time = self.timer.Time.value\n      _slerp_ratio = (_current_time - self.animation_start_time) / self.animation_time\n\n      if _slerp_ratio > 1:\n        _slerp_ratio = 1\n        self.animation_flag = False\n        self.cube_rotate.Transform.value = avango.gua.make_rot_mat(self.animation_end_pos)\n        return\n      \n      _transformed_quat = self.animation_start_pos.slerp_to(self.animation_end_pos, _slerp_ratio)\n      rotation_mat = avango.gua.make_rot_mat(_transformed_quat)\n      self.cube_rotate.Transform.value = rotation_mat\n\n\n    # check if lightexits emmit light and append lights and rays\n    if self.HAS_LIGHT and not self.pick_transforms_appended:\n      for l in self.LIGHTEXITS:\n        if (l == 1):\n          self.cube.Children.value.append(self.pick_transform_plus_x)\n        elif (l == 2):\n          self.cube.Children.value.append(self.pick_transform_minus_x)\n        elif (l == 3):\n          self.cube.Children.value.append(self.pick_transform_plus_y)\n        elif (l == 4):\n          self.cube.Children.value.append(self.pick_transform_minus_y)\n        elif (l == 5):\n          self.cube.Children.value.append(self.pick_transform_plus_z)\n        elif (l == 6):\n          self.cube.Children.value.append(self.pick_transform_minus_z)\n        self.pick_transforms_appended = True\n\n    # check if ray hits object\n    if self.HAS_LIGHT and self.pick_transforms_appended:\n      for l in self.LIGHTEXITS:\n        if (l == 1):\n          if len(self.mf_pick_results_plus_x.value) > 0:\n            self.picked_plus_x = self.mf_pick_results_plus_x.value[0].Object.value\n            if self.picked_plus_x.has_field(\"LightCube\"):\n              self.picked_plus_x.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_plus_x.value) == 0:           \n            if self.picked_plus_x.has_field(\"LightCube\") and not self.picked_plus_x.LightCube.value.ALWAYS_LIGHT:\n              self.picked_plus_x.LightCube.value.HAS_LIGHT = False\n\n        elif (l == 2):\n          if len(self.mf_pick_results_minus_x.value) > 0:\n            self.picked_minus_x = self.mf_pick_results_minus_x.value[0].Object.value\n            if self.picked_minus_x.has_field(\"LightCube\"):\n              self.picked_minus_x.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_minus_x.value) == 0:           \n            if self.picked_minus_x.has_field(\"LightCube\") and not self.picked_minus_x.LightCube.value.ALWAYS_LIGHT:\n              self.picked_minus_x.LightCube.value.HAS_LIGHT = False\n        \n        elif (l == 3):\n          if len(self.mf_pick_results_plus_y.value) > 0:\n            self.picked_plus_y = self.mf_pick_results_plus_y.value[0].Object.value\n            if self.picked_plus_y.has_field(\"LightCube\"):\n              self.picked_plus_y.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_plus_y.value) == 0:           \n            if self.picked_plus_y.has_field(\"LightCube\") and not self.picked_plus_y.LightCube.value.ALWAYS_LIGHT:\n              self.picked_plus_y.LightCube.value.HAS_LIGHT = False\n        \n        elif (l == 4):\n          if len(self.mf_pick_results_minus_y.value) > 0:\n            self.picked_minus_y = self.mf_pick_results_minus_y.value[0].Object.value\n            if self.picked_minus_y.has_field(\"LightCube\"):\n              self.picked_minus_y.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_minus_y.value) == 0:           \n            if self.picked_minus_y.has_field(\"LightCube\") and not self.picked_minus_y.LightCube.value.ALWAYS_LIGHT:\n              self.picked_minus_y.LightCube.value.HAS_LIGHT = False\n        \n        elif (l == 5):\n          if len(self.mf_pick_results_plus_z.value) > 0:\n            self.picked_plus_z = self.mf_pick_results_plus_z.value[0].Object.value\n            if self.picked_plus_z.has_field(\"LightCube\"):\n              self.picked_plus_z.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_plus_z.value) == 0:           \n            if self.picked_plus_z.has_field(\"LightCube\") and not self.picked_plus_z.LightCube.value.ALWAYS_LIGHT:\n              self.picked_plus_z.LightCube.value.HAS_LIGHT = False\n        \n        elif (l == 6):\n          if len(self.mf_pick_results_minus_z.value) > 0:\n            self.picked_minus_z = self.mf_pick_results_minus_z.value[0].Object.value\n            if self.picked_minus_z.has_field(\"LightCube\"):\n              self.picked_minus_z.LightCube.value.HAS_LIGHT = True\n          if len(self.mf_pick_results_minus_z.value) == 0:           \n            if self.picked_minus_z.has_field(\"LightCube\") and not self.picked_minus_z.LightCube.value.ALWAYS_LIGHT:\n              self.picked_minus_z.LightCube.value.HAS_LIGHT = False\n\n\n    if not self.HAS_LIGHT and self.pick_transforms_appended:\n      for l in self.LIGHTEXITS:\n        if (l == 1):\n          self.cube.Children.value.remove(self.pick_transform_plus_x)\n        elif (l == 2):\n          self.cube.Children.value.remove(self.pick_transform_minus_x)\n        elif (l == 3):\n          self.cube.Children.value.remove(self.pick_transform_plus_y)\n        elif (l == 4):\n          self.cube.Children.value.remove(self.pick_transform_minus_y)\n        elif (l == 5):\n          self.cube.Children.value.remove(self.pick_transform_plus_z)\n        elif (l == 6):\n          self.cube.Children.value.remove(self.pick_transform_minus_z)\n        self.pick_transforms_appended = False\n\n\n\n  def initalize_console(self):\n    self.rot_up_button.my_constructor(\"rot_up_\" + self.NAME, avango.gua.make_trans_mat(0.0, 0.0, -0.5) * avango.gua.make_rot_mat(90, 0, 1, 0),self.console_node)\n    self.sf_rot_up.connect_from(self.rot_up_button.sf_bool_button)\n    self.rot_down_button.my_constructor(\"rot_down_\" + self.NAME, avango.gua.make_trans_mat(0.0, 0.0, 0.5) * avango.gua.make_rot_mat(90, 0, 1, 0),self.console_node)\n    self.sf_rot_down.connect_from(self.rot_down_button.sf_bool_button)\n    self.rot_left_button.my_constructor(\"rot_left_\" + self.NAME, avango.gua.make_trans_mat(-0.5, 0.0, 0.0),self.console_node)\n    self.sf_rot_left.connect_from(self.rot_left_button.sf_bool_button)\n    self.rot_right_button.my_constructor(\"rot_right_\" + self.NAME, avango.gua.make_trans_mat(0.5, 0.0, 0.0),self.console_node)\n    self.sf_rot_right.connect_from(self.rot_right_button.sf_bool_button)\n\n\n  def init_lightexits(self):\n    for l in self.LIGHTEXITS:\n      if (l == 1):\n        exit_plus_x = self.loader.create_geometry_from_file('light_exit_plus_x', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_plus_x.GroupNames.value = [\"light_emitter\"]\n        exit_plus_x.add_and_init_field(avango.script.SFObject(), \"LightCube\", self)\n        exit_plus_x.Transform.value = avango.gua.make_trans_mat(0.75,0,0) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        self.cube.Children.value.append(exit_plus_x)\n      elif (l == 2):\n        exit_minus_x = self.loader.create_geometry_from_file('light_exit_minus_x', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_minus_x.Transform.value = avango.gua.make_trans_mat(-0.75,0,0) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        exit_minus_x.GroupNames.value = [\"light_emitter\"]\n        exit_minus_x.add_and_init_field(avango.script.SFObject(), \"LightCube\", self)\n        self.cube.Children.value.append(exit_minus_x)\n      elif (l == 3):\n        exit_plus_y = self.loader.create_geometry_from_file('light_exit_plus_y', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_plus_y.Transform.value = avango.gua.make_trans_mat(0,0.75,0) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        self.cube.Children.value.append(exit_plus_y)\n      elif (l == 4):\n        exit_minus_y = self.loader.create_geometry_from_file('light_exit_plus_z', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_minus_y.Transform.value = avango.gua.make_trans_mat(0,-0.75,0) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        self.cube.Children.value.append(exit_minus_y)\n      elif (l == 5):\n        exit_plus_z = self.loader.create_geometry_from_file('light_exit_plus_z', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_plus_z.Transform.value = avango.gua.make_trans_mat(0,0,0.75) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        self.cube.Children.value.append(exit_plus_z)\n      elif (l == 6):\n        exit_minus_z = self.loader.create_geometry_from_file('light_exit_plus_z', 'data/objects/cube.obj',\n                                                        'AvatarGrey', avango.gua.LoaderFlags.DEFAULTS | avango.gua.LoaderFlags.MAKE_PICKABLE)\n        exit_minus_z.Transform.value = avango.gua.make_trans_mat(0,0,-0.75) * avango.gua.make_scale_mat(0.5,0.5,0.5)\n        self.cube.Children.value.append(exit_minus_z)\n\n\n  def enable_console(self, MENU_LOCATION):\n      MENU_LOCATION.Children.value.append(self.console_node)\n\n\n  @field_has_changed(sf_rot_up)\n  def rotate_up(self):\n    if (self.sf_rot_up.value == True and self.animation_flag == False):\n      self.animation_flag = True\n      self.animation_start_time = self.timer.Time.value\n      self.animation_start_pos = self.cube_rotate.Transform.value.get_rotate()\n      self.animation_end_pos = (avango.gua.make_rot_mat(-90.0, 1, 0, 0) * self.cube_rotate.Transform.value).get_rotate()\n\n      self.rot_up_button.just_rotated = True\n\n  @field_has_changed(sf_rot_down)\n  def rotate_down(self):\n    if (self.sf_rot_down.value == True and self.animation_flag == False):\n      self.animation_flag = True\n      self.animation_start_time = self.timer.Time.value\n      self.animation_start_pos = self.cube_rotate.Transform.value.get_rotate()\n      self.animation_end_pos = (avango.gua.make_rot_mat(90.0, 1, 0, 0) * self.cube_rotate.Transform.value).get_rotate()\n      self.rot_down_button.just_rotated = True\n\n  @field_has_changed(sf_rot_left)\n  def rotate_left(self):\n    if (self.sf_rot_left.value == True and self.animation_flag == False):\n      self.animation_flag = True\n      self.animation_start_time = self.timer.Time.value\n      self.animation_start_pos = self.cube_rotate.Transform.value.get_rotate()\n      self.animation_end_pos = (avango.gua.make_rot_mat(-90.0, 0, 1, 0) * self.cube_rotate.Transform.value).get_rotate()\n      self.rot_left_button.just_rotated = True\n\n  @field_has_changed(sf_rot_right)\n  def rotate_right(self):\n    if (self.sf_rot_right.value == True and self.animation_flag == False):\n      self.animation_flag = True\n      self.animation_start_time = self.timer.Time.value\n      self.animation_start_pos = self.cube_rotate.Transform.value.get_rotate()\n      self.animation_end_pos = (avango.gua.make_rot_mat(90.0, 0, 1, 0) * self.cube_rotate.Transform.value).get_rotate()\n      self.rot_right_button.just_rotated = True\n\n  def initialize_pick_transform(self, pick_transform, PICKER):\n\n    _ray   = avango.gua.nodes.RayNode(Name = \"pick_ray_right\")\n\n    _ray.Transform.value = avango.gua.make_trans_mat(0.0, 0.0, -1.5) * avango.gua.make_scale_mat(1.0, 1.0, 100.0)\n\n    _ray_visual = self.loader.create_geometry_from_file('ray' , 'data/objects/cube.obj',\n                                                    'White', avango.gua.LoaderFlags.DEFAULTS)\n    \n    _ray_visual.Transform.value = avango.gua.make_trans_mat(0.0, 0.0, -21.5) *\\\n                                       avango.gua.make_scale_mat(0.008, 0.008, 20)\n    \n    # set picker values\n    PICKER.SceneGraph = self.SCENEGRAPH\n    PICKER.Ray.value = _ray\n    PICKER.Mask.value = \"light_emitter\"\n    pick_transform.Children.value = [_ray, _ray_visual]\n\nclass LightRayPicker(avango.script.Script):\n  Ray        = avango.gua.SFRayNode()\n  Options    = avango.SFInt()\n  Mask       = avango.SFString()\n  Results    = avango.gua.MFPickResult()\n\n  def __init__(self):\n    self.super(LightRayPicker).__init__()\n    self.always_evaluate(True)\n\n    self.SceneGraph = avango.gua.nodes.SceneGraph()\n    self.Ray.value  = avango.gua.nodes.RayNode()\n    self.Options.value = avango.gua.PickingOptions.PICK_ONLY_FIRST_OBJECT \\\n                         | avango.gua.PickingOptions.PICK_ONLY_FIRST_FACE\\\n                         | avango.gua.PickingOptions.GET_POSITIONS\n    self.Mask.value = \"\"\n    \n  def evaluate(self):\n    results = self.SceneGraph.ray_test(self.Ray.value,\n                                             self.Options.value,\n                                             self.Mask.value)\n    self.Results.value = results.value\n\n\n  # approch for lightemitter\n  '''\n    if (self.IS_EMITTER == True):\n          self.HAS_LIGHT == True\n    else:\n      for l in self.LIGHTEXITS: \n        if (l == 1):\n          self.picked_plus_x = self.mf_pick_results_plus_x.value[0].Object.value\n            if self.picked_plus_x.has_field(\"LightCube\"):\n              if self.picked_plus_x.LightCube.value.IS_EMITTER == True or\\\n                 self.picked_plus_x.LightCube.value.HAS_LIGHT == True:\n                self.HAS_LIGHT == True\n    if HAS_LIGHT == True:\n      append STRAHL\n\n  '''",
			"file": "lib/game_lib/LightCube.py",
			"file_size": 20494,
			"file_write_time": 130391882647523375,
			"settings":
			{
				"buffer_size": 19464,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/game_lib/LightRoom.py",
			"settings":
			{
				"buffer_size": 3100,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/line_creater.py",
			"settings":
			{
				"buffer_size": 2271,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/Navigation.py",
			"settings":
			{
				"buffer_size": 19199,
				"line_ending": "Unix"
			}
		},
		{
			"file": "daemon.py",
			"settings":
			{
				"buffer_size": 10658,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/Device.py",
			"settings":
			{
				"buffer_size": 16378,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/GroundFollowing.py",
			"settings":
			{
				"buffer_size": 7132,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/Intersection.py",
			"settings":
			{
				"buffer_size": 4104,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/interface_lib/InteractivGeometry.py",
			"settings":
			{
				"buffer_size": 7299,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/interface_lib/Interface.py",
			"settings":
			{
				"buffer_size": 8857,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/portal_lib/PortalController.py",
			"settings":
			{
				"buffer_size": 7269,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/SceneManager.py",
			"settings":
			{
				"buffer_size": 14392,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 2534,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/portal_lib/PortalManager.py",
			"settings":
			{
				"buffer_size": 10291,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/senu8384/Desktop/github/oculus-portal/lib/game_lib/LightCube.pyc",
		"/home/senu8384/Desktop/github/oculus-portal/lib/game_lib/LightRoom.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/game_lib/LightCube.py",
		"/home/senu8384/Desktop/oculus_interface/Manipulator.py",
		"/home/senu8384/Desktop/github/oculus-portal/main.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/OVRUser.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/ViewingManager.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/TrackingReader.py",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/ComplexPhongBricks.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/start.sh",
		"/home/senu8384/Desktop/github/oculus-portal/lib/Device.py",
		"/home/senu8384/Desktop/github/oculus-portal/daemon.py",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/Wood.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/lib/DesktopUser.py",
		"/opt/guacamole/current/avango/examples/picking/main.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/Platform.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/BorderObserver.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/game_lib/lightroom.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/Tools.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/game_lib/lightroom-py",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarRedShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarOrangeShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarWhiteShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarYellowShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/ShadelessBlack.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/ShadelessWhite.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/ParallaxBricks.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/Stones.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarDarkGreen.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarMagenta.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarOrange.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarRed.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarWhite.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarYellow.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/EmitPhongGreen.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/PlatformBorder.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/SimplePhongBlack.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/SimplePhongWhite.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarGrey.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarGreen.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/CouplingPlane.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarBlue.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarCyan.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/Water.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/DecouplingPlane.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/White.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/ShadelessGrey.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarBlueShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarCyanShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarDarkGreenShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarGreenShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarGreyShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/data/materials/AvatarMagentaShadeless.gmd",
		"/home/senu8384/Desktop/github/oculus-portal/lib/InputMapping.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/Navigation.py",
		"/home/senu8384/Desktop/github/oculus-portal/configs/desktop_ovr.xml",
		"/home/senu8384/Desktop/github/oculus-portal/lib/SceneManager.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/PowerWallUser.py",
		"/home/senu8384/Desktop/github/oculus-portal/lib/User.py",
		"/home/senu8384/Desktop/oculus_interface/Tools.py",
		"/home/senu8384/Desktop/oculus_interface/handsome.py",
		"/home/senu8384/Desktop/oculus_interface/daemon.py",
		"/home/senu8384/Desktop/oculus_interface/device.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/main.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/device.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/navigator.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/Portal.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/PortalManager.py",
		"/home/senu8384/Desktop/github/testing/portal_tests/simple_scene.py",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/mesh.frag",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/common/header.glsl",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/mesh.vert",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Video3D.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferNURBSUberShader.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferNURBSUberShader.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferPass.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/GBufferVideo3DUberShader.hpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/VolumeLoader.hpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Volume.hpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/NURBS.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/mesh/mesh.frag",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Mesh.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Video3DLoader.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.frag",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.geom",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/video3d/video3d.vert",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/GBufferVideo3DUberShader.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/scenegraph/Video3DNode.cpp",
		"/home/senu8384/Documents/github/guacamole/src/gua/renderer/Video3DLoader.cpp",
		"/home/senu8384/Documents/github/guacamole/include/gua/scenegraph/Video3DNode.hpp",
		"/home/senu8384/Documents/github/guacamole/resources/shaders/uber_shaders/gbuffer/mesh/mesh.vert",
		"/home/senu8384/Documents/github/guacamole/include/gua/renderer/Mesh.hpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer.hpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/Mesh.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/MeshLoader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferMeshUberShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/video3d_geometry/KinectCalibrationFile.hpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/Camera.hpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/GBufferNURBSUberShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBSLoader.cpp",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/NURBSShader.cpp",
		"/home/senu8384/Desktop/github/guacamole/include/gua/renderer/nurbs_geometry/tml/util/copy_constructor_adapter.hpp",
		"/home/senu8384/Desktop/github/guacamole/CMakeLists.txt",
		"/home/senu8384/Desktop/github/guacamole/src/gua/renderer/FinalPass.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/MeshLoader.hpp",
		"/home/senu8384/Desktop/guacamole/scripts/guacamole.sublime-project",
		"/home/senu8384/Documents/svn/kinect/src/KinectPlayer.cpp",
		"/home/senu8384/Documents/svn/kinect/src/demo_app.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/NURBS.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/Video3DLoader.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/MeshLoader.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/VolumeLoader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/scenegraph/GeometryNode.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/scenegraph/Video3DNode.hpp",
		"/home/senu8384/Documents/svn/kinect/include/KinectPlayer.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Video3D.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GBufferNURBSUberShader.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/SerializedNode.hpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/GBufferPass.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/GBufferPass.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/UberShader.cpp",
		"/home/senu8384/Desktop/guacamole/include/gua/renderer/UberShader.hpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/Video3DLoader.cpp",
		"/home/senu8384/Desktop/guacamole/src/gua/renderer/GBufferMeshUberShader.cpp"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/home/senu8384/Desktop/github/oculus-portal/lib",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			":\n",
			"field",
			"has_field",
			"_avatar_group_",
			"Background",
			"painted_ships",
			"skybox",
			"ComplexPho",
			"SimplePH",
			"Stencil",
			"EmitPho",
			"planet",
			"Water",
			"ComplexTe",
			"Parallax",
			"Shadeless.gsd",
			"shadeless",
			"KeyboardMouseDevice",
			"frame_callback",
			"Manipulator",
			"MaterialUpdater",
			"stations[1]",
			"tracking-glasses-1",
			"create_avatar",
			"manipulator",
			"manupulator",
			"Manipulator",
			"do something",
			"head_transform",
			"Picker",
			".set_uniforms",
			"set_uniform",
			"calibrationfile",
			"calibration file",
			"vPosition",
			"_parametric_texture_buffer",
			"parameter_texture",
			"draw kinect",
			"get_uniform_mapping",
			"mater",
			"material"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Shadeless"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/User.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11749,
						"regions":
						{
						},
						"selection":
						[
							[
								3632,
								3632
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1874.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "lib/DesktopUser.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4951,
						"regions":
						{
						},
						"selection":
						[
							[
								3077,
								3077
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 649.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/interface_lib/Manipulator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15152,
						"regions":
						{
						},
						"selection":
						[
							[
								2441,
								2441
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 922.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/portal_lib/Portal.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6234,
						"regions":
						{
						},
						"selection":
						[
							[
								6234,
								6234
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1232.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/game_lib/LightCube.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19464,
						"regions":
						{
						},
						"selection":
						[
							[
								12375,
								12375
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4019.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/game_lib/LightRoom.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3100,
						"regions":
						{
						},
						"selection":
						[
							[
								3100,
								3100
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/line_creater.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2271,
						"regions":
						{
						},
						"selection":
						[
							[
								2141,
								2141
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/Navigation.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19199,
						"regions":
						{
						},
						"selection":
						[
							[
								15206,
								15206
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5852.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "daemon.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10658,
						"regions":
						{
						},
						"selection":
						[
							[
								6336,
								6336
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3315.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/Device.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16378,
						"regions":
						{
						},
						"selection":
						[
							[
								5977,
								5977
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2805.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/GroundFollowing.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7132,
						"regions":
						{
						},
						"selection":
						[
							[
								5282,
								5282
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1734.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/Intersection.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4104,
						"regions":
						{
						},
						"selection":
						[
							[
								2001,
								2001
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 612.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		},
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 12,
					"file": "lib/interface_lib/InteractivGeometry.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7299,
						"regions":
						{
						},
						"selection":
						[
							[
								1740,
								1740
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 561.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "lib/interface_lib/Interface.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8857,
						"regions":
						{
						},
						"selection":
						[
							[
								3332,
								3332
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 245.0,
						"translation.y": 786.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "lib/portal_lib/PortalController.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7269,
						"regions":
						{
						},
						"selection":
						[
							[
								433,
								433
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 204.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "lib/SceneManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14392,
						"regions":
						{
						},
						"selection":
						[
							[
								2253,
								2253
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2534,
						"regions":
						{
						},
						"selection":
						[
							[
								349,
								349
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/portal_lib/PortalManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10291,
						"regions":
						{
						},
						"selection":
						[
							[
								8647,
								8647
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1542.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.531525851198,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "OculusKombiSetup.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"header",
				"resources/shaders/common/header.glsl"
			],
			[
				"gbuffernurb",
				"src/gua/renderer/GBufferNURBSUberShader.cpp"
			],
			[
				"mesh.frag",
				"resources/shaders/uber_shaders/gbuffer/video3d/mesh.frag"
			],
			[
				"video3d.geom",
				"resources/shaders/uber_shaders/gbuffer/video3d/video3d.geom"
			],
			[
				"video3d.vert",
				"resources/shaders/uber_shaders/gbuffer/video3d/video3d.vert"
			],
			[
				"mesh.vert",
				"resources/shaders/uber_shaders/gbuffer/video3d/mesh.vert"
			],
			[
				"vid",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"video",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"g",
				"src/gua/renderer/GBufferPass.cpp"
			],
			[
				"camer",
				"include/gua/renderer/Camera.hpp"
			],
			[
				"mesh",
				"src/gua/renderer/Mesh.cpp"
			],
			[
				"video3d",
				"src/gua/renderer/Video3D.cpp"
			],
			[
				"window",
				"src/gua/renderer/Window.cpp"
			],
			[
				"w",
				"include/gua/renderer/Window.hpp"
			],
			[
				"meshloader",
				"src/gua/renderer/MeshLoader.cpp"
			],
			[
				"geome",
				"include/gua/scenegraph/GeometryNode.hpp"
			],
			[
				"ivdeo",
				"include/gua/scenegraph/Video3DNode.hpp"
			],
			[
				"volume",
				"include/gua/renderer/VolumeLoader.hpp"
			],
			[
				"meshl",
				"include/gua/renderer/MeshLoader.hpp"
			],
			[
				"video3",
				"include/gua/renderer/Video3DLoader.hpp"
			],
			[
				"se",
				"include/gua/renderer/SerializedNode.hpp"
			],
			[
				"gbuffer",
				"include/gua/renderer/GBufferPass.hpp"
			],
			[
				"gbu",
				"src/gua/renderer/GBufferPass.cpp"
			],
			[
				"ubers",
				"src/gua/renderer/UberShader.cpp"
			],
			[
				"meshs",
				"src/gua/renderer/GBufferMeshUberShader.cpp"
			],
			[
				"nur",
				"src/gua/renderer/NURBS.cpp"
			],
			[
				"nurbs",
				"src/gua/renderer/NURBSLoader.cpp"
			],
			[
				"geo",
				"include/gua/scenegraph/GeometryNode.hpp"
			],
			[
				"nurb",
				"include/gua/renderer/NURBS.hpp"
			],
			[
				"r",
				"include/gua/renderer/RenderClient.hpp"
			],
			[
				"renderer",
				"src/gua/renderer/Renderer.cpp"
			],
			[
				"re",
				"include/gua/renderer/RenderContext.hpp"
			],
			[
				"dxt",
				"include/gua/renderer/video3d_geometry/DXTCompressor.h"
			],
			[
				"viedo",
				"include/gua/renderer/Video3D.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 112.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
